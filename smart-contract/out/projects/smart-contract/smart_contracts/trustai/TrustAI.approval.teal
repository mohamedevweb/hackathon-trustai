#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1
    bytecblock 0x151f7c75 "validated" "freelancer" "amount"
    // projects/smart-contract/smart_contracts/trustai/contract.algo.ts:4
    // export class TrustAI extends Contract {
    txn NumAppArgs
    bz main_bare_routing@8
    pushbytess 0xa13a3254 0x7be09440 0x113a88e4 // method "fund_contract(address,address,uint64)string", method "validate_with_ai(bool)string", method "release_payment()string"
    txna ApplicationArgs 0
    match main_fund_contract_route@3 main_validate_with_ai_route@4 main_release_payment_route@5

main_after_if_else@12:
    // projects/smart-contract/smart_contracts/trustai/contract.algo.ts:4
    // export class TrustAI extends Contract {
    intc_0 // 0
    return

main_release_payment_route@5:
    // projects/smart-contract/smart_contracts/trustai/contract.algo.ts:25
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub release_payment
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_validate_with_ai_route@4:
    // projects/smart-contract/smart_contracts/trustai/contract.algo.ts:19
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // projects/smart-contract/smart_contracts/trustai/contract.algo.ts:4
    // export class TrustAI extends Contract {
    txna ApplicationArgs 1
    intc_0 // 0
    getbit
    // projects/smart-contract/smart_contracts/trustai/contract.algo.ts:19
    // @arc4.abimethod()
    callsub validate_with_ai
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_fund_contract_route@3:
    // projects/smart-contract/smart_contracts/trustai/contract.algo.ts:10
    // @arc4.abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // projects/smart-contract/smart_contracts/trustai/contract.algo.ts:4
    // export class TrustAI extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    txna ApplicationArgs 3
    btoi
    // projects/smart-contract/smart_contracts/trustai/contract.algo.ts:10
    // @arc4.abimethod()
    callsub fund_contract
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_0 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_bare_routing@8:
    // projects/smart-contract/smart_contracts/trustai/contract.algo.ts:4
    // export class TrustAI extends Contract {
    txn OnCompletion
    bnz main_after_if_else@12
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// projects/smart-contract/smart_contracts/trustai/contract.algo.ts::TrustAI.fund_contract(client: bytes, freelancer: bytes, amount: uint64) -> bytes:
fund_contract:
    // projects/smart-contract/smart_contracts/trustai/contract.algo.ts:10-11
    // @arc4.abimethod()
    // fund_contract(client: arc4.Address, freelancer: arc4.Address, amount: uint64) {
    proto 3 1
    // projects/smart-contract/smart_contracts/trustai/contract.algo.ts:5
    // client = GlobalState<arc4.Address>()
    pushbytes "client"
    // projects/smart-contract/smart_contracts/trustai/contract.algo.ts:12
    // this.client.value = client
    frame_dig -3
    app_global_put
    // projects/smart-contract/smart_contracts/trustai/contract.algo.ts:6
    // freelancer = GlobalState<arc4.Address>()
    bytec_2 // "freelancer"
    // projects/smart-contract/smart_contracts/trustai/contract.algo.ts:13
    // this.freelancer.value = freelancer
    frame_dig -2
    app_global_put
    // projects/smart-contract/smart_contracts/trustai/contract.algo.ts:7
    // amount = GlobalState<uint64>()
    bytec_3 // "amount"
    // projects/smart-contract/smart_contracts/trustai/contract.algo.ts:14
    // this.amount.value = amount
    frame_dig -1
    app_global_put
    // projects/smart-contract/smart_contracts/trustai/contract.algo.ts:8
    // validated = GlobalState<boolean>()
    bytec_1 // "validated"
    // projects/smart-contract/smart_contracts/trustai/contract.algo.ts:15
    // this.validated.value = false
    intc_0 // 0
    app_global_put
    // projects/smart-contract/smart_contracts/trustai/contract.algo.ts:16
    // return "Contract funded üí∞"
    pushbytes "Contract funded \xf0\x9f\x92\xb0"
    retsub


// projects/smart-contract/smart_contracts/trustai/contract.algo.ts::TrustAI.validate_with_ai(ai_result: uint64) -> bytes:
validate_with_ai:
    // projects/smart-contract/smart_contracts/trustai/contract.algo.ts:19-20
    // @arc4.abimethod()
    // validate_with_ai(ai_result: boolean) {
    proto 1 1
    // projects/smart-contract/smart_contracts/trustai/contract.algo.ts:8
    // validated = GlobalState<boolean>()
    bytec_1 // "validated"
    // projects/smart-contract/smart_contracts/trustai/contract.algo.ts:21
    // this.validated.value = ai_result
    frame_dig -1
    app_global_put
    // projects/smart-contract/smart_contracts/trustai/contract.algo.ts:22
    // return ai_result ? "AI validated ‚úÖ" : "AI rejected ‚ùå"
    frame_dig -1
    bz validate_with_ai_ternary_false@2
    pushbytes "AI validated \xe2\x9c\x85"
    retsub

validate_with_ai_ternary_false@2:
    // projects/smart-contract/smart_contracts/trustai/contract.algo.ts:22
    // return ai_result ? "AI validated ‚úÖ" : "AI rejected ‚ùå"
    pushbytes "AI rejected \xe2\x9d\x8c"
    retsub


// projects/smart-contract/smart_contracts/trustai/contract.algo.ts::TrustAI.release_payment() -> bytes:
release_payment:
    // projects/smart-contract/smart_contracts/trustai/contract.algo.ts:8
    // validated = GlobalState<boolean>()
    intc_0 // 0
    bytec_1 // "validated"
    app_global_get_ex
    assert // check GlobalState exists
    // projects/smart-contract/smart_contracts/trustai/contract.algo.ts:27
    // if (!this.validated.value) return "AI not validated yet ‚ùå"
    bnz release_payment_after_if_else@2
    pushbytes "AI not validated yet \xe2\x9d\x8c"
    retsub

release_payment_after_if_else@2:
    // projects/smart-contract/smart_contracts/trustai/contract.algo.ts:28
    // itxn.payment({ receiver: this.freelancer.value.native, amount: this.amount.value }).submit()
    itxn_begin
    // projects/smart-contract/smart_contracts/trustai/contract.algo.ts:6
    // freelancer = GlobalState<arc4.Address>()
    intc_0 // 0
    bytec_2 // "freelancer"
    app_global_get_ex
    assert // check GlobalState exists
    // projects/smart-contract/smart_contracts/trustai/contract.algo.ts:7
    // amount = GlobalState<uint64>()
    intc_0 // 0
    bytec_3 // "amount"
    app_global_get_ex
    assert // check GlobalState exists
    itxn_field Amount
    itxn_field Receiver
    // projects/smart-contract/smart_contracts/trustai/contract.algo.ts:28
    // itxn.payment({ receiver: this.freelancer.value.native, amount: this.amount.value }).submit()
    intc_1 // 1
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    // projects/smart-contract/smart_contracts/trustai/contract.algo.ts:29
    // return "Payment released üí∏"
    pushbytes "Payment released \xf0\x9f\x92\xb8"
    retsub
